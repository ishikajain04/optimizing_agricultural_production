#for manipulations
import numpy as np
import pandas as pd

#for data visualizations
import matplotlib.pyplot as plt
import seaborn as sns

#for interactivity
from ipywidgets import interact

#lets read the dataset
data = pd.read_csv('data.csv')

#let check the shape of the dataset
print("Shape of the Dataset :",data.shape)

#lets check the head of the dataset
data.head()

lets check if there is any missing value present in the dataset
data.isnull().sum()

#lets check the crops present in this Dataset
data['label'].value_counts()

#lets check the summary for all the crops

print("Average Ratio of Nitrogen in the soil : {0:.2f}".format(data['N'].mean()))
print("Average Ratio of Phosphorous in the soil : {0:.2f}".format(data['P'].mean()))
print("Average Ratio of Potassium in the soil : {0:.2f}".format(data['K'].mean()))
print("Average Temperature in celsius : {0:.2f}".format(data['temperature'].mean()))
print("Average Relative Humidity  in % : {0:.2f}".format(data['humidity'].mean()))
print("Average PH value of the soil : {0:.2f}".format(data['ph'].mean()))
print("Average Rainfall in mm : {0:.2f}".format(data['rainfall'].mean()))

#lets check the summary statistics for each of the crops

@interact
def summary(crops = list(data['label'].value_counts().index)):
    x=data[data['label'] == crops]
    print("----------------------------------------------")
    print("Statistics for Nitrogen")
    print("Minimum Nitrogen required : ",x['N'].min())
    print("Average Nitrogen required : ",x['N'].mean())
    print("Maximum Nitrogen required : ",x['N'].max())
    print("-----------------------------------------------")
    print("Statistics for Phosphrous")
    print("Minimum Phosphrous required : ",x['P'].min())
    print("Average Phosphrous required : ",x['P'].mean())
    print("Maximum Phosphrous required : ",x['P'].max())
    print("-----------------------------------------------")
    print("Statistics for Potassium")
    print("Minimum Potassium required : ",x['K'].min())
    print("Average Potassium required : ",x['K'].mean())
    print("Maximum Potassium required : ",x['K'].max())
    print("-----------------------------------------------")
    print("Statistics for Temperature")
    print("Minimum Temperatue required : {0:.2f}".format(x['temperature'].min()))
    print("Average Temperatue required : {0:.2f}".format(x['temperature'].mean()))
    print("Maximum Temperatue required : {0:.2f}".format(x['temperature'].max()))
    print("-----------------------------------------------")
    print("Statistics for Humidity")
    print("Minimum Humidity required : {0:.2f}".format(x['humidity'].min()))
    print("Average Humidity required : {0:.2f}".format(x['humidity'].mean()))
    print("Maximum Humidity required : {0:.2f}".format(x['humidity'].max()))
    print("-----------------------------------------------")
    print("Statistics for PH")
    print("Minimum PH required : {0:.2f}".format(x['ph'].min()))
    print("Average PH required : {0:.2f}".format(x['ph'].mean()))
    print("Maximum PH required : {0:.2f}".format(x['ph'].max()))
    print("-----------------------------------------------")
    print("Statistics for Rainfall")
    print("Minimum Rainfall required : {0:.2f}".format(x['rainfall'].min()))
    print("Average Rainfall required : {0:.2f}".format(x['rainfall'].mean()))
    print("Maximum Rainfall required : {0:.2f}".format(x['rainfall'].max()))
    
   #lets compare the average requirements for each crops with average conditions

@interact
def compare(conditions = ['N','P','K','temperature', 'ph','humidity','rainfall']):
    print("Average Value for", conditions," is {0:.2f}".format(data[conditions].mean()))
    print("-------------------------------------------------")
    print("Rice : {0:.2f}".format(data[(data['label'] == 'rice')][conditions].mean()))
    print("Black Grams : {0:.2f}".format(data[(data['label'] == 'blackgrams')][conditions].mean()))
    print("Banana : {0:.2f}".format(data[(data['label'] == 'banana')][conditions].mean()))
    print("Jute : {0:.2f}".format(data[(data['label'] == 'jute')][conditions].mean()))
    print("Coconut : {0:.2f}".format(data[(data['label'] == 'coconut')][conditions].mean()))
    print("Apple : {0:.2f}".format(data[(data['label'] == 'apple')][conditions].mean()))
    print("Papaya : {0:.2f}".format(data[(data['label'] == 'papaya')][conditions].mean()))
    print("Muskmelon : {0:.2f}".format(data[(data['label'] == 'muskmelon')][conditions].mean()))
    print("Grapes : {0:.2f}".format(data[(data['label'] == 'grapes')][conditions].mean()))
    print("Watermelon : {0:.2f}".format(data[(data['label'] == 'watermelon')][conditions].mean()))
    print("Kidney Beans : {0:.2f}".format(data[(data['label'] == 'kidneybeans')][conditions].mean()))
    print("Mung Beans : {0:.2f}".format(data[(data['label'] == 'mungbean')][conditions].mean()))
    print("Oranges : {0:.2f}".format(data[(data['label'] == 'oranges')][conditions].mean()))
    print("Chick Peas : {0:.2f}".format(data[(data['label'] == 'chickpea')][conditions].mean()))
    print("Lentils : {0:.2f}".format(data[(data['label'] == 'lentil')][conditions].mean()))
    print("Cotton : {0:.2f}".format(data[(data['label'] == 'cotton')][conditions].mean()))
    print("Maize : {0:.2f}".format(data[(data['label'] == 'maize')][conditions].mean()))
    print("Moth Beans : {0:.2f}".format(data[(data['label'] == 'mothbeans')][conditions].mean()))
    print("Pigeon Peas : {0:.2f}".format(data[(data['label'] == 'pigeonpeas')][conditions].mean()))
    print("Mango : {0:.2f}".format(data[(data['label'] == 'mango')][conditions].mean()))
    print("Pomegranate : {0:.2f}".format(data[(data['label'] == 'pomegranate')][conditions].mean()))
    print("Coffee  : {0:.2f}".format(data[(data['label'] == 'coffee')][conditions].mean()))
    
    # lets make this function more interative

@interact
def compare(conditions = ['N','P','K','temperature','ph','humidity','rainfall']):
    print("Crops which requires greater than average", conditions,'\n')
    print(data[data[conditions] > data[conditions].mean()]['label'].unique())
    print("-----------------------------------------------")
    print("Crops which requires less than average",conditions,'\n')
    print(data[data[conditions] <= data[conditions].mean()]['label'].unique())
    
    plt.subplot(2,4,1)
sns.distplot(data['N'],color='blue')
plt.xlabel('Ratio of Nitrogen',fontsize = 12)
plt.grid()

plt.subplot(2,4,2)
sns.distplot(data['P'],color='green')
plt.xlabel('Ratio of Phosphrous',fontsize = 12)
plt.grid()

plt.subplot(2,4,3)
sns.distplot(data['K'],color='darkblue')
plt.xlabel('Ratio of Potassuim',fontsize = 12)
plt.grid()

plt.subplot(2,4,4)
sns.distplot(data['rainfall'],color='grey')
plt.xlabel('Rainfall',fontsize = 12)
plt.grid()

plt.subplot(2,4,5)
sns.distplot(data['temperature'],color='black')
plt.xlabel('Temperature',fontsize = 12)
plt.grid()

plt.subplot(2,4,6)
sns.distplot(data['humidity'],color='lightgreen')
plt.xlabel('Humidity',fontsize = 12)
plt.grid()

plt.subplot(2,4,7)
sns.distplot(data['ph'],color='darkgreen')
plt.xlabel('pH Level',fontsize = 12)
plt.grid()

plt.suptitle('Distribution for Agricultural Conditions',fontsize = 20)
plt.show()

## Lets find out some interesting facts

print("Some Interesting Patterns")
print("-------------------------------")
print("Crops which requires very High Ratio of Nitrogen Content in soil : ",data[data['N'] > 120]['label'].unique())
print("Crops which requires very High Ratio of Phosphorous Content in soil : ",data[data['P'] > 100]['label'].unique())
print("Crops which requires very High Ratio of Potassium Content in soil : ",data[data['K'] > 200]['label'].unique())
print("Crops which requires very High Rainfall : ",data[data['rainfall'] > 200]['label'].unique())
print("Crops which requires very Low Temperature : ",data[data['temperature'] < 10]['label'].unique())
print("Crops which requires very High Temperature : ",data[data['temperature'] > 40]['label'].unique())
print("Crops which requires very Low Humidity : ",data[data['humidity'] < 20]['label'].unique())
print("Crops which requires very Low pH : ",data[data['ph'] < 4]['label'].unique())
print("Crops which requires very High pH : ",data[data['ph'] > 9]['label'].unique())

### lets understand which crops can only be grown in Summer, Winter and Rainy Season

print("Summer Crops")
print(data[(data['temperature'] > 30) & (data['humidity'] > 50)]['label'].unique())
print("-------------------------------------")
print("Winter Crops")
print(data[(data['temperature'] < 20) & (data['humidity'] > 30)]['label'].unique())
print("-------------------------------------")
print("Rainy Crops")
print(data[(data['rainfall'] > 200) & (data['humidity'] > 30)]['label'].unique())

from sklearn.cluster import KMeans

# removing the label column
x = data.drop(['label'], axis = 1)

# selecting all the values of the data
x = x.values

# checking the shape
print(x.shape)

# lets determine the Optinum Number of Clusters within the Dataset

plt.rcParams['figure.figsize'] = (10,4)

wcss=[]
for i in range(1,11):
    km=KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
    km.fit(x)
    wcss.append(km.inertia_)

    
# Lets plot the results
plt.plot(range(1,11), wcss)
plt.title('The Elbow Method', fontsize = 20)
plt.xlabel('No. of Clusters')
plt.ylabel('wcss')
plt.show()

# Lets implement the K Means algorithm to perform  clustering analysis
km = KMeans(n_clusters = 4, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
y_means = km.fit_predict(x)

# lets find out the results
a = data['label']
y_means = pd.DataFrame(y_means)
z = pd.concat([y_means, a], axis = 1)
z = z.rename(columns = {0 : 'cluster'})

# lets check the clusters of each crops
print("Lets check the results after applying K Means Clustering Analysis \n")
print("Crops in First Cluster :",z[z['cluster'] == 0]['label'].unique())
print("----------------------------------------------------------------")
print("Crops in Second Cluster :",z[z['cluster'] == 1]['label'].unique())
print("----------------------------------------------------------------")
print("Crops in Third Cluster :",z[z['cluster'] == 2]['label'].unique())
print("----------------------------------------------------------------")
print("Crops in Fourth Cluster :",z[z['cluster'] == 3]['label'].unique())

# Lets split the Dataset for predictive modelling

y = data['label']
x = data.drop(['label'], axis = 1)

print("Shape of x:", x.shape)
print("Shape of y:", y.shape)

# Lets create Training and Testing sets for Validation of results
from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x , y , test_size = 0.2, random_state = 0)

print("The shape of x train : ", x_train.shape)
print("The shape of x test : ", x_test.shape)
print("The shape of y train : ", y_train.shape)
print("The shape of x test : ", y_test.shape)

# lets create a Predictive model

from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(x_train, y_train)
y_pred = model.predict(x_test)

# lets evaluate the model performance

from sklearn.metrics import confusion_matrix

#lets print the confusion matrix first
plt.rcParams['figure.figsize'] = (10,10)
cm = confusion_matrix(y_test, y_pred)
sns.heatmap(cm, annot = True, cmap = 'Wistia')
plt.title('Confusion Matrix for Logistic Regression', fontsize = 15)
plt.show()

# lets print the classification Report also

cr = classification_report(y_test, y_pred)
print(cr)

# lets check the head of the dataset

data.head()

prediction = model.predict((np.array([[90,
                                       40,
                                       40,
                                       20,
                                       80,
                                       7,
                                       200]])))
print("The suggested  Crop for the given Climatic Conditions is : ", prediction)
